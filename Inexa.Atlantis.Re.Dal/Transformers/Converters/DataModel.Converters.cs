//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 19/06/2019 11:40:34
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Inexa.Atlantis.Re.Commons.Dtos
{

    public static partial class AffaireConverter
    {

        public static AffaireDto ToDto(this Inexa.Atlantis.Re.Dal.Affaire source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static AffaireDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Affaire source, int level)
        {
            if (source == null)
              return null;

            var target = new AffaireDto();

            // Properties
            target.IdAffaire = source.IdAffaire;
            target.NumeroOrdre = source.NumeroOrdre;
            target.NumeroPolice = source.NumeroPolice;
            target.CapitauxAssure = source.CapitauxAssure;
            target.Activite = source.Activite;
            target.IdStatutAffaire = source.IdStatutAffaire;
            target.IdBranche = source.IdBranche;
            target.IdFiliale = source.IdFiliale;
            target.IdAssure = source.IdAssure;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Affaire ToEntity(this AffaireDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Affaire();

            // Properties
            target.IdAffaire = source.IdAffaire;
            target.NumeroOrdre = source.NumeroOrdre;
            target.NumeroPolice = source.NumeroPolice;
            target.CapitauxAssure = source.CapitauxAssure;
            target.Activite = source.Activite;
            target.IdStatutAffaire = source.IdStatutAffaire;
            target.IdBranche = source.IdBranche;
            target.IdFiliale = source.IdFiliale;
            target.IdAssure = source.IdAssure;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AffaireDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Affaire> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AffaireDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Affaire> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Affaire> ToEntities(this IEnumerable<AffaireDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Affaire source, AffaireDto target);

        static partial void OnEntityCreating(AffaireDto source, Inexa.Atlantis.Re.Dal.Affaire target);

    }

    public static partial class AssureConverter
    {

        public static AssureDto ToDto(this Inexa.Atlantis.Re.Dal.Assure source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static AssureDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Assure source, int level)
        {
            if (source == null)
              return null;

            var target = new AssureDto();

            // Properties
            target.IdAssure = source.IdAssure;
            target.NumeroAssure = source.NumeroAssure;
            target.IdFiliale = source.IdFiliale;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Assure ToEntity(this AssureDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Assure();

            // Properties
            target.IdAssure = source.IdAssure;
            target.NumeroAssure = source.NumeroAssure;
            target.IdFiliale = source.IdFiliale;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AssureDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Assure> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AssureDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Assure> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Assure> ToEntities(this IEnumerable<AssureDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Assure source, AssureDto target);

        static partial void OnEntityCreating(AssureDto source, Inexa.Atlantis.Re.Dal.Assure target);

    }

    public static partial class BrancheConverter
    {

        public static BrancheDto ToDto(this Inexa.Atlantis.Re.Dal.Branche source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static BrancheDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Branche source, int level)
        {
            if (source == null)
              return null;

            var target = new BrancheDto();

            // Properties
            target.IdBranche = source.IdBranche;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Code = source.Code;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Branche ToEntity(this BrancheDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Branche();

            // Properties
            target.IdBranche = source.IdBranche;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Code = source.Code;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<BrancheDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Branche> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<BrancheDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Branche> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Branche> ToEntities(this IEnumerable<BrancheDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Branche source, BrancheDto target);

        static partial void OnEntityCreating(BrancheDto source, Inexa.Atlantis.Re.Dal.Branche target);

    }

    public static partial class DeclarationSinistreConverter
    {

        public static DeclarationSinistreDto ToDto(this Inexa.Atlantis.Re.Dal.DeclarationSinistre source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static DeclarationSinistreDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.DeclarationSinistre source, int level)
        {
            if (source == null)
              return null;

            var target = new DeclarationSinistreDto();

            // Properties
            target.IdDeclarationSinistre = source.IdDeclarationSinistre;
            target.DateSurvenance = source.DateSurvenance;
            target.DateDeclaration = source.DateDeclaration;
            target.NatureSinistre = source.NatureSinistre;
            target.Evaluation = source.Evaluation;
            target.HonoraireExperts = source.HonoraireExperts;
            target.MontantPaye = source.MontantPaye;
            target.MontantRestant = source.MontantRestant;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.DeclarationSinistre ToEntity(this DeclarationSinistreDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.DeclarationSinistre();

            // Properties
            target.IdDeclarationSinistre = source.IdDeclarationSinistre;
            target.DateSurvenance = source.DateSurvenance;
            target.DateDeclaration = source.DateDeclaration;
            target.NatureSinistre = source.NatureSinistre;
            target.Evaluation = source.Evaluation;
            target.HonoraireExperts = source.HonoraireExperts;
            target.MontantPaye = source.MontantPaye;
            target.MontantRestant = source.MontantRestant;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DeclarationSinistreDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.DeclarationSinistre> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DeclarationSinistreDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.DeclarationSinistre> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.DeclarationSinistre> ToEntities(this IEnumerable<DeclarationSinistreDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.DeclarationSinistre source, DeclarationSinistreDto target);

        static partial void OnEntityCreating(DeclarationSinistreDto source, Inexa.Atlantis.Re.Dal.DeclarationSinistre target);

    }

    public static partial class DemandePlacementFacultativeConverter
    {

        public static DemandePlacementFacultativeDto ToDto(this Inexa.Atlantis.Re.Dal.DemandePlacementFacultative source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static DemandePlacementFacultativeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.DemandePlacementFacultative source, int level)
        {
            if (source == null)
              return null;

            var target = new DemandePlacementFacultativeDto();

            // Properties
            target.IdDemandePlacementFacultative = source.IdDemandePlacementFacultative;
            target.DateConsultation = source.DateConsultation;
            target.GarantieCedee = source.GarantieCedee;
            target.Prime = source.Prime;
            target.DateEffet = source.DateEffet;
            target.DateEcheance = source.DateEcheance;
            target.EnCours = source.EnCours;
            target.SMP = source.SMP;
            target.PartFiliale = source.PartFiliale;
            target.VersementAuTraite = source.VersementAuTraite;
            target.IdProcessus = source.IdProcessus;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.DemandePlacementFacultative ToEntity(this DemandePlacementFacultativeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.DemandePlacementFacultative();

            // Properties
            target.IdDemandePlacementFacultative = source.IdDemandePlacementFacultative;
            target.DateConsultation = source.DateConsultation;
            target.GarantieCedee = source.GarantieCedee;
            target.Prime = source.Prime;
            target.DateEffet = source.DateEffet;
            target.DateEcheance = source.DateEcheance;
            target.EnCours = source.EnCours;
            target.SMP = source.SMP;
            target.PartFiliale = source.PartFiliale;
            target.VersementAuTraite = source.VersementAuTraite;
            target.IdProcessus = source.IdProcessus;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DemandePlacementFacultativeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.DemandePlacementFacultative> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DemandePlacementFacultativeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.DemandePlacementFacultative> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.DemandePlacementFacultative> ToEntities(this IEnumerable<DemandePlacementFacultativeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.DemandePlacementFacultative source, DemandePlacementFacultativeDto target);

        static partial void OnEntityCreating(DemandePlacementFacultativeDto source, Inexa.Atlantis.Re.Dal.DemandePlacementFacultative target);

    }

    public static partial class DeviseConverter
    {

        public static DeviseDto ToDto(this Inexa.Atlantis.Re.Dal.Devise source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static DeviseDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Devise source, int level)
        {
            if (source == null)
              return null;

            var target = new DeviseDto();

            // Properties
            target.IdDevise = source.IdDevise;
            target.CodeDevise = source.CodeDevise;
            target.SymboleDevise = source.SymboleDevise;
            target.LibelleDevise = source.LibelleDevise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // Navigation Properties
            if (level > 0) {
              target.Structures = source.Structures.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Devise ToEntity(this DeviseDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Devise();

            // Properties
            target.IdDevise = source.IdDevise;
            target.CodeDevise = source.CodeDevise;
            target.SymboleDevise = source.SymboleDevise;
            target.LibelleDevise = source.LibelleDevise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DeviseDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Devise> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DeviseDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Devise> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Devise> ToEntities(this IEnumerable<DeviseDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Devise source, DeviseDto target);

        static partial void OnEntityCreating(DeviseDto source, Inexa.Atlantis.Re.Dal.Devise target);

    }

    public static partial class DocumentEchangeConverter
    {

        public static DocumentEchangeDto ToDto(this Inexa.Atlantis.Re.Dal.DocumentEchange source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static DocumentEchangeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.DocumentEchange source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentEchangeDto();

            // Properties
            target.IdEchange = source.IdEchange;
            target.IdDocument = source.IdDocument;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.DocumentEchange ToEntity(this DocumentEchangeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.DocumentEchange();

            // Properties
            target.IdEchange = source.IdEchange;
            target.IdDocument = source.IdDocument;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentEchangeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.DocumentEchange> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentEchangeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.DocumentEchange> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.DocumentEchange> ToEntities(this IEnumerable<DocumentEchangeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.DocumentEchange source, DocumentEchangeDto target);

        static partial void OnEntityCreating(DocumentEchangeDto source, Inexa.Atlantis.Re.Dal.DocumentEchange target);

    }

    public static partial class DomaineActiviteConverter
    {

        public static DomaineActiviteDto ToDto(this Inexa.Atlantis.Re.Dal.DomaineActivite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static DomaineActiviteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.DomaineActivite source, int level)
        {
            if (source == null)
              return null;

            var target = new DomaineActiviteDto();

            // Properties
            target.IdDomaineActivite = source.IdDomaineActivite;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.Description = source.Description;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.DomaineActivite ToEntity(this DomaineActiviteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.DomaineActivite();

            // Properties
            target.IdDomaineActivite = source.IdDomaineActivite;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.Description = source.Description;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DomaineActiviteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.DomaineActivite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DomaineActiviteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.DomaineActivite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.DomaineActivite> ToEntities(this IEnumerable<DomaineActiviteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.DomaineActivite source, DomaineActiviteDto target);

        static partial void OnEntityCreating(DomaineActiviteDto source, Inexa.Atlantis.Re.Dal.DomaineActivite target);

    }

    public static partial class EchangeConverter
    {

        public static EchangeDto ToDto(this Inexa.Atlantis.Re.Dal.Echange source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static EchangeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Echange source, int level)
        {
            if (source == null)
              return null;

            var target = new EchangeDto();

            // Properties
            target.IdEchange = source.IdEchange;
            target.DateEchange = source.DateEchange;
            target.IdEmetteur = source.IdEmetteur;
            target.IdDestinataire = source.IdDestinataire;
            target.NatureEmetteur = source.NatureEmetteur;
            target.NatureDestinataire = source.NatureDestinataire;
            target.IdProcessus = source.IdProcessus;
            target.IdTypeEchange = source.IdTypeEchange;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Echange ToEntity(this EchangeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Echange();

            // Properties
            target.IdEchange = source.IdEchange;
            target.DateEchange = source.DateEchange;
            target.IdEmetteur = source.IdEmetteur;
            target.IdDestinataire = source.IdDestinataire;
            target.NatureEmetteur = source.NatureEmetteur;
            target.NatureDestinataire = source.NatureDestinataire;
            target.IdProcessus = source.IdProcessus;
            target.IdTypeEchange = source.IdTypeEchange;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<EchangeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Echange> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<EchangeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Echange> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Echange> ToEntities(this IEnumerable<EchangeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Echange source, EchangeDto target);

        static partial void OnEntityCreating(EchangeDto source, Inexa.Atlantis.Re.Dal.Echange target);

    }

    public static partial class EtapeProcessuConverter
    {

        public static EtapeProcessuDto ToDto(this Inexa.Atlantis.Re.Dal.EtapeProcessu source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static EtapeProcessuDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.EtapeProcessu source, int level)
        {
            if (source == null)
              return null;

            var target = new EtapeProcessuDto();

            // Properties
            target.IdEtapeProcessus = source.IdEtapeProcessus;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Position = source.Position;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.EtapeProcessu ToEntity(this EtapeProcessuDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.EtapeProcessu();

            // Properties
            target.IdEtapeProcessus = source.IdEtapeProcessus;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Position = source.Position;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<EtapeProcessuDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.EtapeProcessu> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<EtapeProcessuDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.EtapeProcessu> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.EtapeProcessu> ToEntities(this IEnumerable<EtapeProcessuDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.EtapeProcessu source, EtapeProcessuDto target);

        static partial void OnEntityCreating(EtapeProcessuDto source, Inexa.Atlantis.Re.Dal.EtapeProcessu target);

    }

    public static partial class FilialeConverter
    {

        public static FilialeDto ToDto(this Inexa.Atlantis.Re.Dal.Filiale source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static FilialeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Filiale source, int level)
        {
            if (source == null)
              return null;

            var target = new FilialeDto();

            // Properties
            target.IdFiliale = source.IdFiliale;
            target.NomFilliale = source.NomFilliale;
            target.AdresseFiliale = source.AdresseFiliale;
            target.CodeFiliale = source.CodeFiliale;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Filiale ToEntity(this FilialeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Filiale();

            // Properties
            target.IdFiliale = source.IdFiliale;
            target.NomFilliale = source.NomFilliale;
            target.AdresseFiliale = source.AdresseFiliale;
            target.CodeFiliale = source.CodeFiliale;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<FilialeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Filiale> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<FilialeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Filiale> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Filiale> ToEntities(this IEnumerable<FilialeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Filiale source, FilialeDto target);

        static partial void OnEntityCreating(FilialeDto source, Inexa.Atlantis.Re.Dal.Filiale target);

    }

    public static partial class FonctionnaliteConverter
    {

        public static FonctionnaliteDto ToDto(this Inexa.Atlantis.Re.Dal.Fonctionnalite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static FonctionnaliteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Fonctionnalite source, int level)
        {
            if (source == null)
              return null;

            var target = new FonctionnaliteDto();

            // Properties
            target.IdFonctionnalite = source.IdFonctionnalite;
            target.CodeParent = source.CodeParent;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.IdModule = source.IdModule;
            target.CodeSousModule = source.CodeSousModule;
            target.OrdreSousModule = source.OrdreSousModule;
            target.Ordre = source.Ordre;
            target.Activer = source.Activer;
            target.Police = source.Police;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Fonctionnalite ToEntity(this FonctionnaliteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Fonctionnalite();

            // Properties
            target.IdFonctionnalite = source.IdFonctionnalite;
            target.CodeParent = source.CodeParent;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.IdModule = source.IdModule;
            target.CodeSousModule = source.CodeSousModule;
            target.OrdreSousModule = source.OrdreSousModule;
            target.Ordre = source.Ordre;
            target.Activer = source.Activer;
            target.Police = source.Police;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<FonctionnaliteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Fonctionnalite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<FonctionnaliteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Fonctionnalite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Fonctionnalite> ToEntities(this IEnumerable<FonctionnaliteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Fonctionnalite source, FonctionnaliteDto target);

        static partial void OnEntityCreating(FonctionnaliteDto source, Inexa.Atlantis.Re.Dal.Fonctionnalite target);

    }

    public static partial class FormeJuridiqueConverter
    {

        public static FormeJuridiqueDto ToDto(this Inexa.Atlantis.Re.Dal.FormeJuridique source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static FormeJuridiqueDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.FormeJuridique source, int level)
        {
            if (source == null)
              return null;

            var target = new FormeJuridiqueDto();

            // Properties
            target.IdFormeJuridique = source.IdFormeJuridique;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.FormeJuridique ToEntity(this FormeJuridiqueDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.FormeJuridique();

            // Properties
            target.IdFormeJuridique = source.IdFormeJuridique;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<FormeJuridiqueDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.FormeJuridique> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<FormeJuridiqueDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.FormeJuridique> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.FormeJuridique> ToEntities(this IEnumerable<FormeJuridiqueDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.FormeJuridique source, FormeJuridiqueDto target);

        static partial void OnEntityCreating(FormeJuridiqueDto source, Inexa.Atlantis.Re.Dal.FormeJuridique target);

    }

    public static partial class HistoriqueLigneSchemasPlacementConverter
    {

        public static HistoriqueLigneSchemasPlacementDto ToDto(this Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static HistoriqueLigneSchemasPlacementDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement source, int level)
        {
            if (source == null)
              return null;

            var target = new HistoriqueLigneSchemasPlacementDto();

            // Properties
            target.IdHistoriqueLigneSchemaPlacement = source.IdHistoriqueLigneSchemaPlacement;
            target.IdLigneSchemaPlacement = source.IdLigneSchemaPlacement;
            target.Proposition = source.Proposition;
            target.Pourcentage = source.Pourcentage;
            target.CapitauxAssures = source.CapitauxAssures;
            target.TauxCommission = source.TauxCommission;
            target.Commission = source.Commission;
            target.PrimeNette = source.PrimeNette;
            target.IdReassureur = source.IdReassureur;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement ToEntity(this HistoriqueLigneSchemasPlacementDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement();

            // Properties
            target.IdHistoriqueLigneSchemaPlacement = source.IdHistoriqueLigneSchemaPlacement;
            target.IdLigneSchemaPlacement = source.IdLigneSchemaPlacement;
            target.Proposition = source.Proposition;
            target.Pourcentage = source.Pourcentage;
            target.CapitauxAssures = source.CapitauxAssures;
            target.TauxCommission = source.TauxCommission;
            target.Commission = source.Commission;
            target.PrimeNette = source.PrimeNette;
            target.IdReassureur = source.IdReassureur;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<HistoriqueLigneSchemasPlacementDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<HistoriqueLigneSchemasPlacementDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement> ToEntities(this IEnumerable<HistoriqueLigneSchemasPlacementDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement source, HistoriqueLigneSchemasPlacementDto target);

        static partial void OnEntityCreating(HistoriqueLigneSchemasPlacementDto source, Inexa.Atlantis.Re.Dal.HistoriqueLigneSchemasPlacement target);

    }

    public static partial class HistoriqueLigneTableauRepartitionChargeConverter
    {

        public static HistoriqueLigneTableauRepartitionChargeDto ToDto(this Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static HistoriqueLigneTableauRepartitionChargeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge source, int level)
        {
            if (source == null)
              return null;

            var target = new HistoriqueLigneTableauRepartitionChargeDto();

            // Properties
            target.IdHistoriqueLigneTableauRepartitionCharge = source.IdHistoriqueLigneTableauRepartitionCharge;
            target.IdTableauRepartition = source.IdTableauRepartition;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.Proposition = source.Proposition;
            target.IdReassureur = source.IdReassureur;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge ToEntity(this HistoriqueLigneTableauRepartitionChargeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge();

            // Properties
            target.IdHistoriqueLigneTableauRepartitionCharge = source.IdHistoriqueLigneTableauRepartitionCharge;
            target.IdTableauRepartition = source.IdTableauRepartition;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.Proposition = source.Proposition;
            target.IdReassureur = source.IdReassureur;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<HistoriqueLigneTableauRepartitionChargeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<HistoriqueLigneTableauRepartitionChargeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge> ToEntities(this IEnumerable<HistoriqueLigneTableauRepartitionChargeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge source, HistoriqueLigneTableauRepartitionChargeDto target);

        static partial void OnEntityCreating(HistoriqueLigneTableauRepartitionChargeDto source, Inexa.Atlantis.Re.Dal.HistoriqueLigneTableauRepartitionCharge target);

    }

    public static partial class InterlocuteurFilialeConverter
    {

        public static InterlocuteurFilialeDto ToDto(this Inexa.Atlantis.Re.Dal.InterlocuteurFiliale source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static InterlocuteurFilialeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.InterlocuteurFiliale source, int level)
        {
            if (source == null)
              return null;

            var target = new InterlocuteurFilialeDto();

            // Properties
            target.IdInterlocuteurFiliale = source.IdInterlocuteurFiliale;
            target.Poste = source.Poste;
            target.IdFiliale = source.IdFiliale;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.InterlocuteurFiliale ToEntity(this InterlocuteurFilialeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.InterlocuteurFiliale();

            // Properties
            target.IdInterlocuteurFiliale = source.IdInterlocuteurFiliale;
            target.Poste = source.Poste;
            target.IdFiliale = source.IdFiliale;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<InterlocuteurFilialeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.InterlocuteurFiliale> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<InterlocuteurFilialeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.InterlocuteurFiliale> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.InterlocuteurFiliale> ToEntities(this IEnumerable<InterlocuteurFilialeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.InterlocuteurFiliale source, InterlocuteurFilialeDto target);

        static partial void OnEntityCreating(InterlocuteurFilialeDto source, Inexa.Atlantis.Re.Dal.InterlocuteurFiliale target);

    }

    public static partial class InterlocuteurReassureurConverter
    {

        public static InterlocuteurReassureurDto ToDto(this Inexa.Atlantis.Re.Dal.InterlocuteurReassureur source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static InterlocuteurReassureurDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.InterlocuteurReassureur source, int level)
        {
            if (source == null)
              return null;

            var target = new InterlocuteurReassureurDto();

            // Properties
            target.IdInterlocuteurReassureur = source.IdInterlocuteurReassureur;
            target.Poste = source.Poste;
            target.IdReassureur = source.IdReassureur;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.InterlocuteurReassureur ToEntity(this InterlocuteurReassureurDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.InterlocuteurReassureur();

            // Properties
            target.IdInterlocuteurReassureur = source.IdInterlocuteurReassureur;
            target.Poste = source.Poste;
            target.IdReassureur = source.IdReassureur;
            target.IdPersonne = source.IdPersonne;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<InterlocuteurReassureurDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.InterlocuteurReassureur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<InterlocuteurReassureurDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.InterlocuteurReassureur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.InterlocuteurReassureur> ToEntities(this IEnumerable<InterlocuteurReassureurDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.InterlocuteurReassureur source, InterlocuteurReassureurDto target);

        static partial void OnEntityCreating(InterlocuteurReassureurDto source, Inexa.Atlantis.Re.Dal.InterlocuteurReassureur target);

    }

    public static partial class LigneRepartitionChargeConverter
    {

        public static LigneRepartitionChargeDto ToDto(this Inexa.Atlantis.Re.Dal.LigneRepartitionCharge source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static LigneRepartitionChargeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.LigneRepartitionCharge source, int level)
        {
            if (source == null)
              return null;

            var target = new LigneRepartitionChargeDto();

            // Properties
            target.IdLigneRepartitionCharge = source.IdLigneRepartitionCharge;
            target.IdTableauRepartitionCharge = source.IdTableauRepartitionCharge;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IdReassureur = source.IdReassureur;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.LigneRepartitionCharge ToEntity(this LigneRepartitionChargeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.LigneRepartitionCharge();

            // Properties
            target.IdLigneRepartitionCharge = source.IdLigneRepartitionCharge;
            target.IdTableauRepartitionCharge = source.IdTableauRepartitionCharge;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IdReassureur = source.IdReassureur;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<LigneRepartitionChargeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.LigneRepartitionCharge> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<LigneRepartitionChargeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.LigneRepartitionCharge> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.LigneRepartitionCharge> ToEntities(this IEnumerable<LigneRepartitionChargeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.LigneRepartitionCharge source, LigneRepartitionChargeDto target);

        static partial void OnEntityCreating(LigneRepartitionChargeDto source, Inexa.Atlantis.Re.Dal.LigneRepartitionCharge target);

    }

    public static partial class LigneSchemasPlacementConverter
    {

        public static LigneSchemasPlacementDto ToDto(this Inexa.Atlantis.Re.Dal.LigneSchemasPlacement source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static LigneSchemasPlacementDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.LigneSchemasPlacement source, int level)
        {
            if (source == null)
              return null;

            var target = new LigneSchemasPlacementDto();

            // Properties
            target.IdLigneSchemaPlacement = source.IdLigneSchemaPlacement;
            target.Proposition = source.Proposition;
            target.Pourcentage = source.Pourcentage;
            target.CapitauxAssures = source.CapitauxAssures;
            target.TauxCommission = source.TauxCommission;
            target.Commission = source.Commission;
            target.PrimeNette = source.PrimeNette;
            target.IdReassureur = source.IdReassureur;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IdSchemasPlacement = source.IdSchemasPlacement;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.LigneSchemasPlacement ToEntity(this LigneSchemasPlacementDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.LigneSchemasPlacement();

            // Properties
            target.IdLigneSchemaPlacement = source.IdLigneSchemaPlacement;
            target.Proposition = source.Proposition;
            target.Pourcentage = source.Pourcentage;
            target.CapitauxAssures = source.CapitauxAssures;
            target.TauxCommission = source.TauxCommission;
            target.Commission = source.Commission;
            target.PrimeNette = source.PrimeNette;
            target.IdReassureur = source.IdReassureur;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IdSchemasPlacement = source.IdSchemasPlacement;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<LigneSchemasPlacementDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.LigneSchemasPlacement> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<LigneSchemasPlacementDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.LigneSchemasPlacement> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.LigneSchemasPlacement> ToEntities(this IEnumerable<LigneSchemasPlacementDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.LigneSchemasPlacement source, LigneSchemasPlacementDto target);

        static partial void OnEntityCreating(LigneSchemasPlacementDto source, Inexa.Atlantis.Re.Dal.LigneSchemasPlacement target);

    }

    public static partial class MailParametreConverter
    {

        public static MailParametreDto ToDto(this Inexa.Atlantis.Re.Dal.MailParametre source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static MailParametreDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.MailParametre source, int level)
        {
            if (source == null)
              return null;

            var target = new MailParametreDto();

            // Properties
            target.IdMailParametre = source.IdMailParametre;
            target.Code = source.Code;
            target.Description = source.Description;
            target.Valeur = source.Valeur;
            target.Ordre = source.Ordre;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.MailParametre ToEntity(this MailParametreDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.MailParametre();

            // Properties
            target.IdMailParametre = source.IdMailParametre;
            target.Code = source.Code;
            target.Description = source.Description;
            target.Valeur = source.Valeur;
            target.Ordre = source.Ordre;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<MailParametreDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.MailParametre> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<MailParametreDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.MailParametre> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.MailParametre> ToEntities(this IEnumerable<MailParametreDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.MailParametre source, MailParametreDto target);

        static partial void OnEntityCreating(MailParametreDto source, Inexa.Atlantis.Re.Dal.MailParametre target);

    }

    public static partial class MouvementTresorerieConverter
    {

        public static MouvementTresorerieDto ToDto(this Inexa.Atlantis.Re.Dal.MouvementTresorerie source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static MouvementTresorerieDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.MouvementTresorerie source, int level)
        {
            if (source == null)
              return null;

            var target = new MouvementTresorerieDto();

            // Properties
            target.IdMouvement = source.IdMouvement;
            target.IdStatutMouvement = source.IdStatutMouvement;
            target.Entrant = source.Entrant;
            target.Libelle = source.Libelle;
            target.Code = source.Code;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.MouvementTresorerie ToEntity(this MouvementTresorerieDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.MouvementTresorerie();

            // Properties
            target.IdMouvement = source.IdMouvement;
            target.IdStatutMouvement = source.IdStatutMouvement;
            target.Entrant = source.Entrant;
            target.Libelle = source.Libelle;
            target.Code = source.Code;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<MouvementTresorerieDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.MouvementTresorerie> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<MouvementTresorerieDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.MouvementTresorerie> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.MouvementTresorerie> ToEntities(this IEnumerable<MouvementTresorerieDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.MouvementTresorerie source, MouvementTresorerieDto target);

        static partial void OnEntityCreating(MouvementTresorerieDto source, Inexa.Atlantis.Re.Dal.MouvementTresorerie target);

    }

    public static partial class PayConverter
    {

        public static PayDto ToDto(this Inexa.Atlantis.Re.Dal.Pay source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static PayDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Pay source, int level)
        {
            if (source == null)
              return null;

            var target = new PayDto();

            // Properties
            target.IdPays = source.IdPays;
            target.Libelle = source.Libelle;
            target.LibelleNationnalite = source.LibelleNationnalite;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // Navigation Properties
            if (level > 0) {
              target.Structures = source.Structures.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Pay ToEntity(this PayDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Pay();

            // Properties
            target.IdPays = source.IdPays;
            target.Libelle = source.Libelle;
            target.LibelleNationnalite = source.LibelleNationnalite;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PayDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Pay> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PayDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Pay> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Pay> ToEntities(this IEnumerable<PayDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Pay source, PayDto target);

        static partial void OnEntityCreating(PayDto source, Inexa.Atlantis.Re.Dal.Pay target);

    }

    public static partial class PersonneConverter
    {

        public static PersonneDto ToDto(this Inexa.Atlantis.Re.Dal.Personne source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static PersonneDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Personne source, int level)
        {
            if (source == null)
              return null;

            var target = new PersonneDto();

            // Properties
            target.IdPersonne = source.IdPersonne;
            target.TypePersonne = source.TypePersonne;
            target.IdCivilite = source.IdCivilite;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.DateNaissance = source.DateNaissance;
            target.LieuNaissance = source.LieuNaissance;
            target.IdTypePieceIdentite = source.IdTypePieceIdentite;
            target.NumeroPieceIdentite = source.NumeroPieceIdentite;
            target.IdPays = source.IdPays;
            target.DatePieceIdentite = source.DatePieceIdentite;
            target.DateValiditePieceIdentite = source.DateValiditePieceIdentite;
            target.IdFormeJuridique = source.IdFormeJuridique;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Personne ToEntity(this PersonneDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Personne();

            // Properties
            target.IdPersonne = source.IdPersonne;
            target.TypePersonne = source.TypePersonne;
            target.IdCivilite = source.IdCivilite;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.DateNaissance = source.DateNaissance;
            target.LieuNaissance = source.LieuNaissance;
            target.IdTypePieceIdentite = source.IdTypePieceIdentite;
            target.NumeroPieceIdentite = source.NumeroPieceIdentite;
            target.IdPays = source.IdPays;
            target.DatePieceIdentite = source.DatePieceIdentite;
            target.DateValiditePieceIdentite = source.DateValiditePieceIdentite;
            target.IdFormeJuridique = source.IdFormeJuridique;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PersonneDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Personne> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PersonneDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Personne> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Personne> ToEntities(this IEnumerable<PersonneDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Personne source, PersonneDto target);

        static partial void OnEntityCreating(PersonneDto source, Inexa.Atlantis.Re.Dal.Personne target);

    }

    public static partial class ProcessuConverter
    {

        public static ProcessuDto ToDto(this Inexa.Atlantis.Re.Dal.Processu source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ProcessuDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Processu source, int level)
        {
            if (source == null)
              return null;

            var target = new ProcessuDto();

            // Properties
            target.IdProcessus = source.IdProcessus;
            target.IdAffaire = source.IdAffaire;
            target.IdTypeProcessus = source.IdTypeProcessus;
            target.Categorie = source.Categorie;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Processu ToEntity(this ProcessuDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Processu();

            // Properties
            target.IdProcessus = source.IdProcessus;
            target.IdAffaire = source.IdAffaire;
            target.IdTypeProcessus = source.IdTypeProcessus;
            target.Categorie = source.Categorie;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProcessuDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Processu> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProcessuDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Processu> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Processu> ToEntities(this IEnumerable<ProcessuDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Processu source, ProcessuDto target);

        static partial void OnEntityCreating(ProcessuDto source, Inexa.Atlantis.Re.Dal.Processu target);

    }

    public static partial class ProfessionConverter
    {

        public static ProfessionDto ToDto(this Inexa.Atlantis.Re.Dal.Profession source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ProfessionDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Profession source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfessionDto();

            // Properties
            target.IdProfession = source.IdProfession;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.CreatedBy = source.CreatedBy;
            target.Description = source.Description;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Profession ToEntity(this ProfessionDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Profession();

            // Properties
            target.IdProfession = source.IdProfession;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.CreatedBy = source.CreatedBy;
            target.Description = source.Description;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfessionDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Profession> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfessionDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Profession> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Profession> ToEntities(this IEnumerable<ProfessionDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Profession source, ProfessionDto target);

        static partial void OnEntityCreating(ProfessionDto source, Inexa.Atlantis.Re.Dal.Profession target);

    }

    public static partial class ProfilConverter
    {

        public static ProfilDto ToDto(this Inexa.Atlantis.Re.Dal.Profil source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ProfilDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Profil source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfilDto();

            // Properties
            target.IdProfil = source.IdProfil;
            target.CodeProfil = source.CodeProfil;
            target.Intitule = source.Intitule;
            target.Description = source.Description;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Profil ToEntity(this ProfilDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Profil();

            // Properties
            target.IdProfil = source.IdProfil;
            target.CodeProfil = source.CodeProfil;
            target.Intitule = source.Intitule;
            target.Description = source.Description;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfilDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Profil> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfilDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Profil> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Profil> ToEntities(this IEnumerable<ProfilDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Profil source, ProfilDto target);

        static partial void OnEntityCreating(ProfilDto source, Inexa.Atlantis.Re.Dal.Profil target);

    }

    public static partial class ProfilFonctionnaliteConverter
    {

        public static ProfilFonctionnaliteDto ToDto(this Inexa.Atlantis.Re.Dal.ProfilFonctionnalite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ProfilFonctionnaliteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ProfilFonctionnalite source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfilFonctionnaliteDto();

            // Properties
            target.IdProfilFonctionnalite = source.IdProfilFonctionnalite;
            target.IdProfil = source.IdProfil;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ProfilFonctionnalite ToEntity(this ProfilFonctionnaliteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ProfilFonctionnalite();

            // Properties
            target.IdProfilFonctionnalite = source.IdProfilFonctionnalite;
            target.IdProfil = source.IdProfil;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfilFonctionnaliteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ProfilFonctionnalite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfilFonctionnaliteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ProfilFonctionnalite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ProfilFonctionnalite> ToEntities(this IEnumerable<ProfilFonctionnaliteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ProfilFonctionnalite source, ProfilFonctionnaliteDto target);

        static partial void OnEntityCreating(ProfilFonctionnaliteDto source, Inexa.Atlantis.Re.Dal.ProfilFonctionnalite target);

    }

    public static partial class ProfilFonctionnaliteHistoConverter
    {

        public static ProfilFonctionnaliteHistoDto ToDto(this Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ProfilFonctionnaliteHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfilFonctionnaliteHistoDto();

            // Properties
            target.IdProfilFonctionnalite = source.IdProfilFonctionnalite;
            target.IdProfil = source.IdProfil;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto ToEntity(this ProfilFonctionnaliteHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto();

            // Properties
            target.IdProfilFonctionnalite = source.IdProfilFonctionnalite;
            target.IdProfil = source.IdProfil;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfilFonctionnaliteHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfilFonctionnaliteHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto> ToEntities(this IEnumerable<ProfilFonctionnaliteHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto source, ProfilFonctionnaliteHistoDto target);

        static partial void OnEntityCreating(ProfilFonctionnaliteHistoDto source, Inexa.Atlantis.Re.Dal.ProfilFonctionnaliteHisto target);

    }

    public static partial class ReassureurConverter
    {

        public static ReassureurDto ToDto(this Inexa.Atlantis.Re.Dal.Reassureur source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ReassureurDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Reassureur source, int level)
        {
            if (source == null)
              return null;

            var target = new ReassureurDto();

            // Properties
            target.IdReassureur = source.IdReassureur;
            target.CodeReassureur = source.CodeReassureur;
            target.NomReassureur = source.NomReassureur;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Reassureur ToEntity(this ReassureurDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Reassureur();

            // Properties
            target.IdReassureur = source.IdReassureur;
            target.CodeReassureur = source.CodeReassureur;
            target.NomReassureur = source.NomReassureur;
            target.IdPays = source.IdPays;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ReassureurDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Reassureur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ReassureurDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Reassureur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Reassureur> ToEntities(this IEnumerable<ReassureurDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Reassureur source, ReassureurDto target);

        static partial void OnEntityCreating(ReassureurDto source, Inexa.Atlantis.Re.Dal.Reassureur target);

    }

    public static partial class SchemasPlacementConverter
    {

        public static SchemasPlacementDto ToDto(this Inexa.Atlantis.Re.Dal.SchemasPlacement source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SchemasPlacementDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SchemasPlacement source, int level)
        {
            if (source == null)
              return null;

            var target = new SchemasPlacementDto();

            // Properties
            target.IdSchemaPlacement = source.IdSchemaPlacement;
            target.Proposition = source.Proposition;
            target.NumeroFiche = source.NumeroFiche;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SchemasPlacement ToEntity(this SchemasPlacementDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SchemasPlacement();

            // Properties
            target.IdSchemaPlacement = source.IdSchemaPlacement;
            target.Proposition = source.Proposition;
            target.NumeroFiche = source.NumeroFiche;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SchemasPlacementDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SchemasPlacement> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SchemasPlacementDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SchemasPlacement> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SchemasPlacement> ToEntities(this IEnumerable<SchemasPlacementDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SchemasPlacement source, SchemasPlacementDto target);

        static partial void OnEntityCreating(SchemasPlacementDto source, Inexa.Atlantis.Re.Dal.SchemasPlacement target);

    }

    public static partial class SecteurActiviteConverter
    {

        public static SecteurActiviteDto ToDto(this Inexa.Atlantis.Re.Dal.SecteurActivite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SecteurActiviteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SecteurActivite source, int level)
        {
            if (source == null)
              return null;

            var target = new SecteurActiviteDto();

            // Properties
            target.IdDomaineActivite = source.IdDomaineActivite;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SecteurActivite ToEntity(this SecteurActiviteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SecteurActivite();

            // Properties
            target.IdDomaineActivite = source.IdDomaineActivite;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SecteurActiviteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SecteurActivite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SecteurActiviteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SecteurActivite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SecteurActivite> ToEntities(this IEnumerable<SecteurActiviteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SecteurActivite source, SecteurActiviteDto target);

        static partial void OnEntityCreating(SecteurActiviteDto source, Inexa.Atlantis.Re.Dal.SecteurActivite target);

    }

    public static partial class SituationMatrimonialeConverter
    {

        public static SituationMatrimonialeDto ToDto(this Inexa.Atlantis.Re.Dal.SituationMatrimoniale source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SituationMatrimonialeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SituationMatrimoniale source, int level)
        {
            if (source == null)
              return null;

            var target = new SituationMatrimonialeDto();

            // Properties
            target.IdSituationMatrimoniale = source.IdSituationMatrimoniale;
            target.Libelle = source.Libelle;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SituationMatrimoniale ToEntity(this SituationMatrimonialeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SituationMatrimoniale();

            // Properties
            target.IdSituationMatrimoniale = source.IdSituationMatrimoniale;
            target.Libelle = source.Libelle;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SituationMatrimonialeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SituationMatrimoniale> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SituationMatrimonialeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SituationMatrimoniale> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SituationMatrimoniale> ToEntities(this IEnumerable<SituationMatrimonialeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SituationMatrimoniale source, SituationMatrimonialeDto target);

        static partial void OnEntityCreating(SituationMatrimonialeDto source, Inexa.Atlantis.Re.Dal.SituationMatrimoniale target);

    }

    public static partial class StatutAffaireConverter
    {

        public static StatutAffaireDto ToDto(this Inexa.Atlantis.Re.Dal.StatutAffaire source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static StatutAffaireDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.StatutAffaire source, int level)
        {
            if (source == null)
              return null;

            var target = new StatutAffaireDto();

            // Properties
            target.IdStatutAffaire = source.IdStatutAffaire;
            target.Description = source.Description;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.StatutAffaire ToEntity(this StatutAffaireDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.StatutAffaire();

            // Properties
            target.IdStatutAffaire = source.IdStatutAffaire;
            target.Description = source.Description;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<StatutAffaireDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.StatutAffaire> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<StatutAffaireDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.StatutAffaire> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.StatutAffaire> ToEntities(this IEnumerable<StatutAffaireDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.StatutAffaire source, StatutAffaireDto target);

        static partial void OnEntityCreating(StatutAffaireDto source, Inexa.Atlantis.Re.Dal.StatutAffaire target);

    }

    public static partial class StatutMouvementConverter
    {

        public static StatutMouvementDto ToDto(this Inexa.Atlantis.Re.Dal.StatutMouvement source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static StatutMouvementDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.StatutMouvement source, int level)
        {
            if (source == null)
              return null;

            var target = new StatutMouvementDto();

            // Properties
            target.IdStatutMouvement = source.IdStatutMouvement;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.StatutMouvement ToEntity(this StatutMouvementDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.StatutMouvement();

            // Properties
            target.IdStatutMouvement = source.IdStatutMouvement;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<StatutMouvementDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.StatutMouvement> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<StatutMouvementDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.StatutMouvement> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.StatutMouvement> ToEntities(this IEnumerable<StatutMouvementDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.StatutMouvement source, StatutMouvementDto target);

        static partial void OnEntityCreating(StatutMouvementDto source, Inexa.Atlantis.Re.Dal.StatutMouvement target);

    }

    public static partial class SuiviProcessuConverter
    {

        public static SuiviProcessuDto ToDto(this Inexa.Atlantis.Re.Dal.SuiviProcessu source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SuiviProcessuDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SuiviProcessu source, int level)
        {
            if (source == null)
              return null;

            var target = new SuiviProcessuDto();

            // Properties
            target.IdTypeEchange = source.IdTypeEchange;
            target.IdEtapeProcessus = source.IdEtapeProcessus;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SuiviProcessu ToEntity(this SuiviProcessuDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SuiviProcessu();

            // Properties
            target.IdTypeEchange = source.IdTypeEchange;
            target.IdEtapeProcessus = source.IdEtapeProcessus;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SuiviProcessuDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SuiviProcessu> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SuiviProcessuDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SuiviProcessu> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SuiviProcessu> ToEntities(this IEnumerable<SuiviProcessuDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SuiviProcessu source, SuiviProcessuDto target);

        static partial void OnEntityCreating(SuiviProcessuDto source, Inexa.Atlantis.Re.Dal.SuiviProcessu target);

    }

    public static partial class SysComplexiteMotDePasseConverter
    {

        public static SysComplexiteMotDePasseDto ToDto(this Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysComplexiteMotDePasseDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse source, int level)
        {
            if (source == null)
              return null;

            var target = new SysComplexiteMotDePasseDto();

            // Properties
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse ToEntity(this SysComplexiteMotDePasseDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse();

            // Properties
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysComplexiteMotDePasseDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysComplexiteMotDePasseDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse> ToEntities(this IEnumerable<SysComplexiteMotDePasseDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse source, SysComplexiteMotDePasseDto target);

        static partial void OnEntityCreating(SysComplexiteMotDePasseDto source, Inexa.Atlantis.Re.Dal.SysComplexiteMotDePasse target);

    }

    public static partial class SysLogConverter
    {

        public static SysLogDto ToDto(this Inexa.Atlantis.Re.Dal.SysLog source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysLogDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysLog source, int level)
        {
            if (source == null)
              return null;

            var target = new SysLogDto();

            // Properties
            target.IdSysLog = source.IdSysLog;
            target.Entite = source.Entite;
            target.IdEntite = source.IdEntite;
            target.AppMessage = source.AppMessage;
            target.SysMessage = source.SysMessage;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysLog ToEntity(this SysLogDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysLog();

            // Properties
            target.IdSysLog = source.IdSysLog;
            target.Entite = source.Entite;
            target.IdEntite = source.IdEntite;
            target.AppMessage = source.AppMessage;
            target.SysMessage = source.SysMessage;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysLogDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysLog> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysLogDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysLog> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysLog> ToEntities(this IEnumerable<SysLogDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysLog source, SysLogDto target);

        static partial void OnEntityCreating(SysLogDto source, Inexa.Atlantis.Re.Dal.SysLog target);

    }

    public static partial class SysMailBoxConverter
    {

        public static SysMailBoxDto ToDto(this Inexa.Atlantis.Re.Dal.SysMailBox source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysMailBoxDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysMailBox source, int level)
        {
            if (source == null)
              return null;

            var target = new SysMailBoxDto();

            // Properties
            target.IdSysMailBox = source.IdSysMailBox;
            target.Entite = source.Entite;
            target.IdEntite = source.IdEntite;
            target.IdMailitem = source.IdMailitem;
            target.Statut = source.Statut;
            target.DateCreation = source.DateCreation;
            target.MailMessage = source.MailMessage;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysMailBox ToEntity(this SysMailBoxDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysMailBox();

            // Properties
            target.IdSysMailBox = source.IdSysMailBox;
            target.Entite = source.Entite;
            target.IdEntite = source.IdEntite;
            target.IdMailitem = source.IdMailitem;
            target.Statut = source.Statut;
            target.DateCreation = source.DateCreation;
            target.MailMessage = source.MailMessage;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysMailBoxDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysMailBox> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysMailBoxDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysMailBox> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysMailBox> ToEntities(this IEnumerable<SysMailBoxDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysMailBox source, SysMailBoxDto target);

        static partial void OnEntityCreating(SysMailBoxDto source, Inexa.Atlantis.Re.Dal.SysMailBox target);

    }

    public static partial class SysNotificationConverter
    {

        public static SysNotificationDto ToDto(this Inexa.Atlantis.Re.Dal.SysNotification source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysNotificationDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysNotification source, int level)
        {
            if (source == null)
              return null;

            var target = new SysNotificationDto();

            // Properties
            target.IdNotification = source.IdNotification;
            target.Titre = source.Titre;
            target.Message = source.Message;
            target.Url = source.Url;
            target.IdUtilisateur = source.IdUtilisateur;
            target.DateCreation = source.DateCreation;
            target.IsClicked = source.IsClicked;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysNotification ToEntity(this SysNotificationDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysNotification();

            // Properties
            target.IdNotification = source.IdNotification;
            target.Titre = source.Titre;
            target.Message = source.Message;
            target.Url = source.Url;
            target.IdUtilisateur = source.IdUtilisateur;
            target.DateCreation = source.DateCreation;
            target.IsClicked = source.IsClicked;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysNotificationDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysNotification> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysNotificationDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysNotification> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysNotification> ToEntities(this IEnumerable<SysNotificationDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysNotification source, SysNotificationDto target);

        static partial void OnEntityCreating(SysNotificationDto source, Inexa.Atlantis.Re.Dal.SysNotification target);

    }

    public static partial class SysObjetConverter
    {

        public static SysObjetDto ToDto(this Inexa.Atlantis.Re.Dal.SysObjet source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysObjetDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysObjet source, int level)
        {
            if (source == null)
              return null;

            var target = new SysObjetDto();

            // Properties
            target.IdSysObjet = source.IdSysObjet;
            target.TypeObjet = source.TypeObjet;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysObjet ToEntity(this SysObjetDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysObjet();

            // Properties
            target.IdSysObjet = source.IdSysObjet;
            target.TypeObjet = source.TypeObjet;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysObjetDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysObjet> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysObjetDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysObjet> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysObjet> ToEntities(this IEnumerable<SysObjetDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysObjet source, SysObjetDto target);

        static partial void OnEntityCreating(SysObjetDto source, Inexa.Atlantis.Re.Dal.SysObjet target);

    }

    public static partial class SysStrategieMotDePasseConverter
    {

        public static SysStrategieMotDePasseDto ToDto(this Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysStrategieMotDePasseDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse source, int level)
        {
            if (source == null)
              return null;

            var target = new SysStrategieMotDePasseDto();

            // Properties
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse ToEntity(this SysStrategieMotDePasseDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse();

            // Properties
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysStrategieMotDePasseDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysStrategieMotDePasseDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse> ToEntities(this IEnumerable<SysStrategieMotDePasseDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse source, SysStrategieMotDePasseDto target);

        static partial void OnEntityCreating(SysStrategieMotDePasseDto source, Inexa.Atlantis.Re.Dal.SysStrategieMotDePasse target);

    }

    public static partial class SysStrategieMotDePasseHistoConverter
    {

        public static SysStrategieMotDePasseHistoDto ToDto(this Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static SysStrategieMotDePasseHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new SysStrategieMotDePasseHistoDto();

            // Properties
            target.IdSysStrategieMotDePasseHisto = source.IdSysStrategieMotDePasseHisto;
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Temps = source.Temps;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto ToEntity(this SysStrategieMotDePasseHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto();

            // Properties
            target.IdSysStrategieMotDePasseHisto = source.IdSysStrategieMotDePasseHisto;
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Temps = source.Temps;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<SysStrategieMotDePasseHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<SysStrategieMotDePasseHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto> ToEntities(this IEnumerable<SysStrategieMotDePasseHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto source, SysStrategieMotDePasseHistoDto target);

        static partial void OnEntityCreating(SysStrategieMotDePasseHistoDto source, Inexa.Atlantis.Re.Dal.SysStrategieMotDePasseHisto target);

    }

    public static partial class TableauRepartitionChargeConverter
    {

        public static TableauRepartitionChargeDto ToDto(this Inexa.Atlantis.Re.Dal.TableauRepartitionCharge source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TableauRepartitionChargeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TableauRepartitionCharge source, int level)
        {
            if (source == null)
              return null;

            var target = new TableauRepartitionChargeDto();

            // Properties
            target.IdTableauRepartitionCharge = source.IdTableauRepartitionCharge;
            target.NumeroFiche = source.NumeroFiche;
            target.Proposition = source.Proposition;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TableauRepartitionCharge ToEntity(this TableauRepartitionChargeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TableauRepartitionCharge();

            // Properties
            target.IdTableauRepartitionCharge = source.IdTableauRepartitionCharge;
            target.NumeroFiche = source.NumeroFiche;
            target.Proposition = source.Proposition;
            target.IdProcessus = source.IdProcessus;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TableauRepartitionChargeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TableauRepartitionCharge> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TableauRepartitionChargeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TableauRepartitionCharge> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TableauRepartitionCharge> ToEntities(this IEnumerable<TableauRepartitionChargeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TableauRepartitionCharge source, TableauRepartitionChargeDto target);

        static partial void OnEntityCreating(TableauRepartitionChargeDto source, Inexa.Atlantis.Re.Dal.TableauRepartitionCharge target);

    }

    public static partial class TermeConverter
    {

        public static TermeDto ToDto(this Inexa.Atlantis.Re.Dal.Terme source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TermeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Terme source, int level)
        {
            if (source == null)
              return null;

            var target = new TermeDto();

            // Properties
            target.IdTerme = source.IdTerme;
            target.LimiteSouscription = source.LimiteSouscription;
            target.Exclusion = source.Exclusion;
            target.Taux = source.Taux;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Terme ToEntity(this TermeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Terme();

            // Properties
            target.IdTerme = source.IdTerme;
            target.LimiteSouscription = source.LimiteSouscription;
            target.Exclusion = source.Exclusion;
            target.Taux = source.Taux;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TermeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Terme> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TermeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Terme> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Terme> ToEntities(this IEnumerable<TermeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Terme source, TermeDto target);

        static partial void OnEntityCreating(TermeDto source, Inexa.Atlantis.Re.Dal.Terme target);

    }

    public static partial class TermeTraiteConverter
    {

        public static TermeTraiteDto ToDto(this Inexa.Atlantis.Re.Dal.TermeTraite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TermeTraiteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TermeTraite source, int level)
        {
            if (source == null)
              return null;

            var target = new TermeTraiteDto();

            // Properties
            target.IdTermeTraite = source.IdTermeTraite;
            target.IdTraite = source.IdTraite;
            target.IdTerme = source.IdTerme;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TermeTraite ToEntity(this TermeTraiteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TermeTraite();

            // Properties
            target.IdTermeTraite = source.IdTermeTraite;
            target.IdTraite = source.IdTraite;
            target.IdTerme = source.IdTerme;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TermeTraiteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TermeTraite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TermeTraiteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TermeTraite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TermeTraite> ToEntities(this IEnumerable<TermeTraiteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TermeTraite source, TermeTraiteDto target);

        static partial void OnEntityCreating(TermeTraiteDto source, Inexa.Atlantis.Re.Dal.TermeTraite target);

    }

    public static partial class TraceConverter
    {

        public static TraceDto ToDto(this Inexa.Atlantis.Re.Dal.Trace source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TraceDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Trace source, int level)
        {
            if (source == null)
              return null;

            var target = new TraceDto();

            // Properties
            target.IdTrace = source.IdTrace;
            target.IdStructure = source.IdStructure;
            target.IdUtilisateur = source.IdUtilisateur;
            target.DateOperation = source.DateOperation;
            target.HeureOperation = source.HeureOperation;
            target.DateSysteme = source.DateSysteme;
            target.HeureSysteme = source.HeureSysteme;
            target.IdTypeOperation = source.IdTypeOperation;
            target.CodeOperation = source.CodeOperation;
            target.Origine = source.Origine;
            target.IdOrigine = source.IdOrigine;
            target.IdFormulaire = source.IdFormulaire;
            target.CodeFormulaire = source.CodeFormulaire;
            target.LibelleOperation = source.LibelleOperation;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Trace ToEntity(this TraceDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Trace();

            // Properties
            target.IdTrace = source.IdTrace;
            target.IdStructure = source.IdStructure;
            target.IdUtilisateur = source.IdUtilisateur;
            target.DateOperation = source.DateOperation;
            target.HeureOperation = source.HeureOperation;
            target.DateSysteme = source.DateSysteme;
            target.HeureSysteme = source.HeureSysteme;
            target.IdTypeOperation = source.IdTypeOperation;
            target.CodeOperation = source.CodeOperation;
            target.Origine = source.Origine;
            target.IdOrigine = source.IdOrigine;
            target.IdFormulaire = source.IdFormulaire;
            target.CodeFormulaire = source.CodeFormulaire;
            target.LibelleOperation = source.LibelleOperation;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TraceDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Trace> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TraceDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Trace> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Trace> ToEntities(this IEnumerable<TraceDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Trace source, TraceDto target);

        static partial void OnEntityCreating(TraceDto source, Inexa.Atlantis.Re.Dal.Trace target);

    }

    public static partial class TraiteConverter
    {

        public static TraiteDto ToDto(this Inexa.Atlantis.Re.Dal.Traite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TraiteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Traite source, int level)
        {
            if (source == null)
              return null;

            var target = new TraiteDto();

            // Properties
            target.IdTraite = source.IdTraite;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.NatureActivite = source.NatureActivite;
            target.IdBranche = source.IdBranche;
            target.IdReassureur = source.IdReassureur;
            target.IdStructure = source.IdStructure;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Traite ToEntity(this TraiteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Traite();

            // Properties
            target.IdTraite = source.IdTraite;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.NatureActivite = source.NatureActivite;
            target.IdBranche = source.IdBranche;
            target.IdReassureur = source.IdReassureur;
            target.IdStructure = source.IdStructure;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TraiteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Traite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TraiteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Traite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Traite> ToEntities(this IEnumerable<TraiteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Traite source, TraiteDto target);

        static partial void OnEntityCreating(TraiteDto source, Inexa.Atlantis.Re.Dal.Traite target);

    }

    public static partial class TypeEchangeConverter
    {

        public static TypeEchangeDto ToDto(this Inexa.Atlantis.Re.Dal.TypeEchange source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TypeEchangeDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TypeEchange source, int level)
        {
            if (source == null)
              return null;

            var target = new TypeEchangeDto();

            // Properties
            target.IdTypeEchange = source.IdTypeEchange;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TypeEchange ToEntity(this TypeEchangeDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TypeEchange();

            // Properties
            target.IdTypeEchange = source.IdTypeEchange;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TypeEchangeDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TypeEchange> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TypeEchangeDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TypeEchange> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TypeEchange> ToEntities(this IEnumerable<TypeEchangeDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TypeEchange source, TypeEchangeDto target);

        static partial void OnEntityCreating(TypeEchangeDto source, Inexa.Atlantis.Re.Dal.TypeEchange target);

    }

    public static partial class TypePersonneConverter
    {

        public static TypePersonneDto ToDto(this Inexa.Atlantis.Re.Dal.TypePersonne source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TypePersonneDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TypePersonne source, int level)
        {
            if (source == null)
              return null;

            var target = new TypePersonneDto();

            // Properties
            target.IdTypePersonne = source.IdTypePersonne;
            target.LibelleTypePersonne = source.LibelleTypePersonne;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TypePersonne ToEntity(this TypePersonneDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TypePersonne();

            // Properties
            target.IdTypePersonne = source.IdTypePersonne;
            target.LibelleTypePersonne = source.LibelleTypePersonne;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TypePersonneDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TypePersonne> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TypePersonneDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TypePersonne> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TypePersonne> ToEntities(this IEnumerable<TypePersonneDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TypePersonne source, TypePersonneDto target);

        static partial void OnEntityCreating(TypePersonneDto source, Inexa.Atlantis.Re.Dal.TypePersonne target);

    }

    public static partial class TypeProcessuConverter
    {

        public static TypeProcessuDto ToDto(this Inexa.Atlantis.Re.Dal.TypeProcessu source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TypeProcessuDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TypeProcessu source, int level)
        {
            if (source == null)
              return null;

            var target = new TypeProcessuDto();

            // Properties
            target.IdTypeProcessus = source.IdTypeProcessus;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TypeProcessu ToEntity(this TypeProcessuDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TypeProcessu();

            // Properties
            target.IdTypeProcessus = source.IdTypeProcessus;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TypeProcessuDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TypeProcessu> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TypeProcessuDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TypeProcessu> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TypeProcessu> ToEntities(this IEnumerable<TypeProcessuDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TypeProcessu source, TypeProcessuDto target);

        static partial void OnEntityCreating(TypeProcessuDto source, Inexa.Atlantis.Re.Dal.TypeProcessu target);

    }

    public static partial class UtilisateurConverter
    {

        public static UtilisateurDto ToDto(this Inexa.Atlantis.Re.Dal.Utilisateur source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Utilisateur source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurDto();

            // Properties
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.Adresse = source.Adresse;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.IdProfil = source.IdProfil;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsOldUser = source.IsOldUser;
            target.IsWindowAccount = source.IsWindowAccount;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.IdStructure = source.IdStructure;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Utilisateur ToEntity(this UtilisateurDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Utilisateur();

            // Properties
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.Adresse = source.Adresse;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.IdProfil = source.IdProfil;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsOldUser = source.IsOldUser;
            target.IsWindowAccount = source.IsWindowAccount;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.IdStructure = source.IdStructure;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Utilisateur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Utilisateur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Utilisateur> ToEntities(this IEnumerable<UtilisateurDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Utilisateur source, UtilisateurDto target);

        static partial void OnEntityCreating(UtilisateurDto source, Inexa.Atlantis.Re.Dal.Utilisateur target);

    }

    public static partial class UtilisateurFonctionnaliteConverter
    {

        public static UtilisateurFonctionnaliteDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurFonctionnaliteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurFonctionnaliteDto();

            // Properties
            target.IdUtilisateurFonctionnalite = source.IdUtilisateurFonctionnalite;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite ToEntity(this UtilisateurFonctionnaliteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite();

            // Properties
            target.IdUtilisateurFonctionnalite = source.IdUtilisateurFonctionnalite;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurFonctionnaliteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurFonctionnaliteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite> ToEntities(this IEnumerable<UtilisateurFonctionnaliteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite source, UtilisateurFonctionnaliteDto target);

        static partial void OnEntityCreating(UtilisateurFonctionnaliteDto source, Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalite target);

    }

    public static partial class UtilisateurFonctionnaliteHistoConverter
    {

        public static UtilisateurFonctionnaliteHistoDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurFonctionnaliteHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurFonctionnaliteHistoDto();

            // Properties
            target.IdUtilisateurFonctionnalite = source.IdUtilisateurFonctionnalite;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto ToEntity(this UtilisateurFonctionnaliteHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto();

            // Properties
            target.IdUtilisateurFonctionnalite = source.IdUtilisateurFonctionnalite;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurFonctionnaliteHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurFonctionnaliteHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto> ToEntities(this IEnumerable<UtilisateurFonctionnaliteHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto source, UtilisateurFonctionnaliteHistoDto target);

        static partial void OnEntityCreating(UtilisateurFonctionnaliteHistoDto source, Inexa.Atlantis.Re.Dal.UtilisateurFonctionnaliteHisto target);

    }

    public static partial class UtilisateurFonctionnalitePriveConverter
    {

        public static UtilisateurFonctionnalitePriveDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurFonctionnalitePriveDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurFonctionnalitePriveDto();

            // Properties
            target.IdUtilisateurFonctionnalitePrive = source.IdUtilisateurFonctionnalitePrive;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive ToEntity(this UtilisateurFonctionnalitePriveDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive();

            // Properties
            target.IdUtilisateurFonctionnalitePrive = source.IdUtilisateurFonctionnalitePrive;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurFonctionnalitePriveDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurFonctionnalitePriveDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive> ToEntities(this IEnumerable<UtilisateurFonctionnalitePriveDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive source, UtilisateurFonctionnalitePriveDto target);

        static partial void OnEntityCreating(UtilisateurFonctionnalitePriveDto source, Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePrive target);

    }

    public static partial class UtilisateurFonctionnalitePriveHistoConverter
    {

        public static UtilisateurFonctionnalitePriveHistoDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurFonctionnalitePriveHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurFonctionnalitePriveHistoDto();

            // Properties
            target.IdUtilisateurFonctionnalitePrive = source.IdUtilisateurFonctionnalitePrive;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto ToEntity(this UtilisateurFonctionnalitePriveHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto();

            // Properties
            target.IdUtilisateurFonctionnalitePrive = source.IdUtilisateurFonctionnalitePrive;
            target.IdUtilisateur = source.IdUtilisateur;
            target.CodeFonctionnalite = source.CodeFonctionnalite;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurFonctionnalitePriveHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurFonctionnalitePriveHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto> ToEntities(this IEnumerable<UtilisateurFonctionnalitePriveHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto source, UtilisateurFonctionnalitePriveHistoDto target);

        static partial void OnEntityCreating(UtilisateurFonctionnalitePriveHistoDto source, Inexa.Atlantis.Re.Dal.UtilisateurFonctionnalitePriveHisto target);

    }

    public static partial class UtilisateurHistoConverter
    {

        public static UtilisateurHistoDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurHistoDto();

            // Properties
            target.IdUtilisateurHisto = source.IdUtilisateurHisto;
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.Adresse = source.Adresse;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.IdProfil = source.IdProfil;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsOldUser = source.IsOldUser;
            target.IsWindowAccount = source.IsWindowAccount;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.IdStructure = source.IdStructure;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurHisto ToEntity(this UtilisateurHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurHisto();

            // Properties
            target.IdUtilisateurHisto = source.IdUtilisateurHisto;
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.Adresse = source.Adresse;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.IdProfil = source.IdProfil;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsOldUser = source.IsOldUser;
            target.IsWindowAccount = source.IsWindowAccount;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.IdStructure = source.IdStructure;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurHisto> ToEntities(this IEnumerable<UtilisateurHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurHisto source, UtilisateurHistoDto target);

        static partial void OnEntityCreating(UtilisateurHistoDto source, Inexa.Atlantis.Re.Dal.UtilisateurHisto target);

    }

    public static partial class UtilisateurProfilConverter
    {

        public static UtilisateurProfilDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurProfil source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurProfilDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurProfil source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurProfilDto();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdProfil = source.IdProfil;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurProfil ToEntity(this UtilisateurProfilDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurProfil();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdProfil = source.IdProfil;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurProfilDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurProfil> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurProfilDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurProfil> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurProfil> ToEntities(this IEnumerable<UtilisateurProfilDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurProfil source, UtilisateurProfilDto target);

        static partial void OnEntityCreating(UtilisateurProfilDto source, Inexa.Atlantis.Re.Dal.UtilisateurProfil target);

    }

    public static partial class UtilisateurProfilHistoConverter
    {

        public static UtilisateurProfilHistoDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurProfilHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurProfilHistoDto();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdProfil = source.IdProfil;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto ToEntity(this UtilisateurProfilHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdProfil = source.IdProfil;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurProfilHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurProfilHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto> ToEntities(this IEnumerable<UtilisateurProfilHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto source, UtilisateurProfilHistoDto target);

        static partial void OnEntityCreating(UtilisateurProfilHistoDto source, Inexa.Atlantis.Re.Dal.UtilisateurProfilHisto target);

    }

    public static partial class UtilisateurRestrictionConverter
    {

        public static UtilisateurRestrictionDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurRestriction source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurRestrictionDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurRestriction source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurRestrictionDto();

            // Properties
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdSysObjet = source.IdSysObjet;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurRestriction ToEntity(this UtilisateurRestrictionDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurRestriction();

            // Properties
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdSysObjet = source.IdSysObjet;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurRestrictionDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurRestriction> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurRestrictionDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurRestriction> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurRestriction> ToEntities(this IEnumerable<UtilisateurRestrictionDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurRestriction source, UtilisateurRestrictionDto target);

        static partial void OnEntityCreating(UtilisateurRestrictionDto source, Inexa.Atlantis.Re.Dal.UtilisateurRestriction target);

    }

    public static partial class UtilisateurRestrictionHistoConverter
    {

        public static UtilisateurRestrictionHistoDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurRestrictionHistoDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurRestrictionHistoDto();

            // Properties
            target.IdUtilisateurRestrictionHisto = source.IdUtilisateurRestrictionHisto;
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdSysObjet = source.IdSysObjet;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto ToEntity(this UtilisateurRestrictionHistoDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto();

            // Properties
            target.IdUtilisateurRestrictionHisto = source.IdUtilisateurRestrictionHisto;
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.IdSysObjet = source.IdSysObjet;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurRestrictionHistoDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurRestrictionHistoDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto> ToEntities(this IEnumerable<UtilisateurRestrictionHistoDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto source, UtilisateurRestrictionHistoDto target);

        static partial void OnEntityCreating(UtilisateurRestrictionHistoDto source, Inexa.Atlantis.Re.Dal.UtilisateurRestrictionHisto target);

    }

    public static partial class UtilisateurSessionConverter
    {

        public static UtilisateurSessionDto ToDto(this Inexa.Atlantis.Re.Dal.UtilisateurSession source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static UtilisateurSessionDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.UtilisateurSession source, int level)
        {
            if (source == null)
              return null;

            var target = new UtilisateurSessionDto();

            // Properties
            target.IdUtilisateurSession = source.IdUtilisateurSession;
            target.IdUtilisateur = source.IdUtilisateur;
            target.TimeSession = source.TimeSession;
            target.IsConnected = source.IsConnected;
            target.DateLastConnection = source.DateLastConnection;
            target.DateLastActivity = source.DateLastActivity;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.IsDeleted = source.IsDeleted;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.UtilisateurSession ToEntity(this UtilisateurSessionDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.UtilisateurSession();

            // Properties
            target.IdUtilisateurSession = source.IdUtilisateurSession;
            target.IdUtilisateur = source.IdUtilisateur;
            target.TimeSession = source.TimeSession;
            target.IsConnected = source.IsConnected;
            target.DateLastConnection = source.DateLastConnection;
            target.DateLastActivity = source.DateLastActivity;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.IsDeleted = source.IsDeleted;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UtilisateurSessionDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurSession> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UtilisateurSessionDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.UtilisateurSession> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.UtilisateurSession> ToEntities(this IEnumerable<UtilisateurSessionDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.UtilisateurSession source, UtilisateurSessionDto target);

        static partial void OnEntityCreating(UtilisateurSessionDto source, Inexa.Atlantis.Re.Dal.UtilisateurSession target);

    }

    public static partial class ViewSysStrategieMotDePasseConverter
    {

        public static ViewSysStrategieMotDePasseDto ToDto(this Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ViewSysStrategieMotDePasseDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse source, int level)
        {
            if (source == null)
              return null;

            var target = new ViewSysStrategieMotDePasseDto();

            // Properties
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.LibelleComplexite = source.LibelleComplexite;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Code = source.Code;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse ToEntity(this ViewSysStrategieMotDePasseDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse();

            // Properties
            target.IdSysStrategieMotDePasse = source.IdSysStrategieMotDePasse;
            target.Libelle = source.Libelle;
            target.LongeurMinimum = source.LongeurMinimum;
            target.DureeDeVie = source.DureeDeVie;
            target.NombreTentativeAvantVerrouillage = source.NombreTentativeAvantVerrouillage;
            target.IdSysComplexiteMotDePasse = source.IdSysComplexiteMotDePasse;
            target.LibelleComplexite = source.LibelleComplexite;
            target.UtiliserAncienMotDePasse = source.UtiliserAncienMotDePasse;
            target.ChangerMotDePasseApresAttribution = source.ChangerMotDePasseApresAttribution;
            target.Actif = source.Actif;
            target.IsDeleted = source.IsDeleted;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Code = source.Code;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ViewSysStrategieMotDePasseDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ViewSysStrategieMotDePasseDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse> ToEntities(this IEnumerable<ViewSysStrategieMotDePasseDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse source, ViewSysStrategieMotDePasseDto target);

        static partial void OnEntityCreating(ViewSysStrategieMotDePasseDto source, Inexa.Atlantis.Re.Dal.ViewSysStrategieMotDePasse target);

    }

    public static partial class ViewUtilisateurConverter
    {

        public static ViewUtilisateurDto ToDto(this Inexa.Atlantis.Re.Dal.ViewUtilisateur source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ViewUtilisateurDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ViewUtilisateur source, int level)
        {
            if (source == null)
              return null;

            var target = new ViewUtilisateurDto();

            // Properties
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsWindowAccount = source.IsWindowAccount;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsDeleted = source.IsDeleted;
            target.DateMaj = source.DateMaj;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Adresse = source.Adresse;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.NomUtilisateur = source.NomUtilisateur;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.IsOldUser = source.IsOldUser;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.IdProfil = source.IdProfil;
            target.IdStructure = source.IdStructure;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ViewUtilisateur ToEntity(this ViewUtilisateurDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ViewUtilisateur();

            // Properties
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Password = source.Password;
            target.TimeSession = source.TimeSession;
            target.Actif = source.Actif;
            target.IsWindowAccount = source.IsWindowAccount;
            target.CanApplySingleSession = source.CanApplySingleSession;
            target.IsDeleted = source.IsDeleted;
            target.DateMaj = source.DateMaj;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.Adresse = source.Adresse;
            target.Email = source.Email;
            target.Telephone = source.Telephone;
            target.NomUtilisateur = source.NomUtilisateur;
            target.Photo = source.Photo;
            target.VoirCompteSensible = source.VoirCompteSensible;
            target.IsOldUser = source.IsOldUser;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.IsConnected = source.IsConnected;
            target.ComptePermanent = source.ComptePermanent;
            target.DateDebutValidite = source.DateDebutValidite;
            target.DateFinValidite = source.DateFinValidite;
            target.ChangeLogin = source.ChangeLogin;
            target.ChangePassword = source.ChangePassword;
            target.IdProfil = source.IdProfil;
            target.IdStructure = source.IdStructure;
            target.RecevoirMail = source.RecevoirMail;
            target.RecevoirMailSysteme = source.RecevoirMailSysteme;
            target.TentativeConnexion = source.TentativeConnexion;
            target.DateDebutValiditePassword = source.DateDebutValiditePassword;
            target.DateFinValiditePassword = source.DateFinValiditePassword;
            target.UserSageCode = source.UserSageCode;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ViewUtilisateurDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ViewUtilisateurDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ViewUtilisateur> ToEntities(this IEnumerable<ViewUtilisateurDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ViewUtilisateur source, ViewUtilisateurDto target);

        static partial void OnEntityCreating(ViewUtilisateurDto source, Inexa.Atlantis.Re.Dal.ViewUtilisateur target);

    }

    public static partial class ViewUtilisateurProfilConverter
    {

        public static ViewUtilisateurProfilDto ToDto(this Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ViewUtilisateurProfilDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil source, int level)
        {
            if (source == null)
              return null;

            var target = new ViewUtilisateurProfilDto();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.NomUtilisateur = source.NomUtilisateur;
            target.IdProfil = source.IdProfil;
            target.Intitule = source.Intitule;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil ToEntity(this ViewUtilisateurProfilDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil();

            // Properties
            target.IdUtilisateurProfil = source.IdUtilisateurProfil;
            target.IdUtilisateur = source.IdUtilisateur;
            target.NomUtilisateur = source.NomUtilisateur;
            target.IdProfil = source.IdProfil;
            target.Intitule = source.Intitule;
            target.DateValiditeDebut = source.DateValiditeDebut;
            target.DateValiditeFin = source.DateValiditeFin;
            target.DateFinIndeterminer = source.DateFinIndeterminer;
            target.Autorise = source.Autorise;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMaj = source.DateMaj;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ViewUtilisateurProfilDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ViewUtilisateurProfilDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil> ToEntities(this IEnumerable<ViewUtilisateurProfilDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil source, ViewUtilisateurProfilDto target);

        static partial void OnEntityCreating(ViewUtilisateurProfilDto source, Inexa.Atlantis.Re.Dal.ViewUtilisateurProfil target);

    }

    public static partial class ViewUtilisateurRestrictionConverter
    {

        public static ViewUtilisateurRestrictionDto ToDto(this Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static ViewUtilisateurRestrictionDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction source, int level)
        {
            if (source == null)
              return null;

            var target = new ViewUtilisateurRestrictionDto();

            // Properties
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.IdSysObjet = source.IdSysObjet;
            target.TypeObjet = source.TypeObjet;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction ToEntity(this ViewUtilisateurRestrictionDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction();

            // Properties
            target.IdUtilisateurRestriction = source.IdUtilisateurRestriction;
            target.IdUtilisateur = source.IdUtilisateur;
            target.Login = source.Login;
            target.Nom = source.Nom;
            target.Prenom = source.Prenom;
            target.IdSysObjet = source.IdSysObjet;
            target.TypeObjet = source.TypeObjet;
            target.Code = source.Code;
            target.Libelle = source.Libelle;
            target.Description = source.Description;
            target.Autorise = source.Autorise;
            target.DateCreation = source.DateCreation;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ViewUtilisateurRestrictionDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ViewUtilisateurRestrictionDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction> ToEntities(this IEnumerable<ViewUtilisateurRestrictionDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction source, ViewUtilisateurRestrictionDto target);

        static partial void OnEntityCreating(ViewUtilisateurRestrictionDto source, Inexa.Atlantis.Re.Dal.ViewUtilisateurRestriction target);

    }

    public static partial class StructureConverter
    {

        public static StructureDto ToDto(this Inexa.Atlantis.Re.Dal.Structure source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static StructureDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Structure source, int level)
        {
            if (source == null)
              return null;

            var target = new StructureDto();

            // Properties
            target.IdStructure = source.IdStructure;
            target.RaisonSocialeStructure = source.RaisonSocialeStructure;
            target.DateCreation1 = source.DateCreation1;
            target.DecretCreation = source.DecretCreation;
            target.NumeroAgrement = source.NumeroAgrement;
            target.IdDevise = source.IdDevise;
            target.CapitalSocial = source.CapitalSocial;
            target.IdPays = source.IdPays;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // Navigation Properties
            if (level > 0) {
              target.Devise = source.Devise.ToDtoWithRelated(level - 1);
              target.Pay = source.Pay.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Structure ToEntity(this StructureDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Structure();

            // Properties
            target.IdStructure = source.IdStructure;
            target.RaisonSocialeStructure = source.RaisonSocialeStructure;
            target.DateCreation1 = source.DateCreation1;
            target.DecretCreation = source.DecretCreation;
            target.NumeroAgrement = source.NumeroAgrement;
            target.IdDevise = source.IdDevise;
            target.CapitalSocial = source.CapitalSocial;
            target.IdPays = source.IdPays;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;
            target.ModifiedBy = source.ModifiedBy;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<StructureDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Structure> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<StructureDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Structure> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Structure> ToEntities(this IEnumerable<StructureDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Structure source, StructureDto target);

        static partial void OnEntityCreating(StructureDto source, Inexa.Atlantis.Re.Dal.Structure target);

    }

    public static partial class CiviliteConverter
    {

        public static CiviliteDto ToDto(this Inexa.Atlantis.Re.Dal.Civilite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static CiviliteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.Civilite source, int level)
        {
            if (source == null)
              return null;

            var target = new CiviliteDto();

            // Properties
            target.IdCivilite = source.IdCivilite;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.Civilite ToEntity(this CiviliteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.Civilite();

            // Properties
            target.IdCivilite = source.IdCivilite;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<CiviliteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.Civilite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<CiviliteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.Civilite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.Civilite> ToEntities(this IEnumerable<CiviliteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.Civilite source, CiviliteDto target);

        static partial void OnEntityCreating(CiviliteDto source, Inexa.Atlantis.Re.Dal.Civilite target);

    }

    public static partial class TypePieceIdentiteConverter
    {

        public static TypePieceIdentiteDto ToDto(this Inexa.Atlantis.Re.Dal.TypePieceIdentite source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static TypePieceIdentiteDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.TypePieceIdentite source, int level)
        {
            if (source == null)
              return null;

            var target = new TypePieceIdentiteDto();

            // Properties
            target.IdTypePieceIdentite = source.IdTypePieceIdentite;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.TypePieceIdentite ToEntity(this TypePieceIdentiteDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.TypePieceIdentite();

            // Properties
            target.IdTypePieceIdentite = source.IdTypePieceIdentite;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TypePieceIdentiteDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.TypePieceIdentite> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TypePieceIdentiteDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.TypePieceIdentite> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.TypePieceIdentite> ToEntities(this IEnumerable<TypePieceIdentiteDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.TypePieceIdentite source, TypePieceIdentiteDto target);

        static partial void OnEntityCreating(TypePieceIdentiteDto source, Inexa.Atlantis.Re.Dal.TypePieceIdentite target);

    }

    public static partial class CategorieProcessuConverter
    {

        public static CategorieProcessuDto ToDto(this Inexa.Atlantis.Re.Dal.CategorieProcessu source)
        {
            return source.ToDtoWithRelated(0); //valeur par defaut 0
        }

        public static CategorieProcessuDto ToDtoWithRelated(this Inexa.Atlantis.Re.Dal.CategorieProcessu source, int level)
        {
            if (source == null)
              return null;

            var target = new CategorieProcessuDto();

            // Properties
            target.IdCategorieProcessus = source.IdCategorieProcessus;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Inexa.Atlantis.Re.Dal.CategorieProcessu ToEntity(this CategorieProcessuDto source)
        {
            if (source == null)
              return null;

            var target = new Inexa.Atlantis.Re.Dal.CategorieProcessu();

            // Properties
            target.IdCategorieProcessus = source.IdCategorieProcessus;
            target.Libelle = source.Libelle;
            target.IsDeleted = source.IsDeleted;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedBy = source.ModifiedBy;
            target.DateCreation = source.DateCreation;
            target.DateMAJ = source.DateMAJ;
            target.DataKey = source.DataKey;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<CategorieProcessuDto> ToDtos(this IEnumerable<Inexa.Atlantis.Re.Dal.CategorieProcessu> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<CategorieProcessuDto> ToDtosWithRelated(this IEnumerable<Inexa.Atlantis.Re.Dal.CategorieProcessu> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Inexa.Atlantis.Re.Dal.CategorieProcessu> ToEntities(this IEnumerable<CategorieProcessuDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Inexa.Atlantis.Re.Dal.CategorieProcessu source, CategorieProcessuDto target);

        static partial void OnEntityCreating(CategorieProcessuDto source, Inexa.Atlantis.Re.Dal.CategorieProcessu target);

    }

}
